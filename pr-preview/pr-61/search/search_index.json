{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Processing Library Template","text":"<p>The Processing Library Template is a template to help developers of Processing libraries to develop and release. It can be found on Github at https://github.com/processing/processing-library-template.</p> <p></p> <p>This documentation provides information on</p> <ol> <li>Getting started</li> <li>The development process</li> <li>Releasing your library</li> <li>Troubleshooting</li> </ol>"},{"location":"index.html#references","title":"References","text":"<p>Existing references for developing libraries for Processing can be found on the following Github wiki pages:</p> <ul> <li>https://github.com/benfry/processing4/wiki/Library-Basics</li> <li>https://github.com/benfry/processing4/wiki/Library-Guidelines</li> <li>https://github.com/benfry/processing4/wiki/Library-Overview</li> </ul>"},{"location":"index.html#contributors","title":"Contributors","text":"<p>This template was created as part of the 2024 New Beginnings (pr05) Grant from the Processing Foundation, to simplify the workflows for libraries, tools, and modes, mentored by @Stefterv.</p> <p>It is based on and inspired by a number of Processing library templates, including:</p> <ul> <li>https://github.com/processing/processing-library-template-gradle</li> <li>https://github.com/enkatsu/processing-library-template-gradle</li> <li>https://github.com/hamoid/processing-library-template/</li> </ul> <p>I wish to thank the developers of these repositories, who generously provided guidance and time. This template has been developed in collaboration with @enkatsu.</p>"},{"location":"develop.html","title":"The Development Process","text":"<p>You are now ready to develop your library. This guide will walk you through resolving dependencies, configuring the build, creating release artifacts, and testing your library in Processing.</p> <p>Note: If you haven't set up your environment yet, refer to the Getting Started guide.</p>"},{"location":"develop.html#developing-the-library","title":"Developing the library","text":"<p>Develop your library within <code>src/main/java/</code>. Set the <code>package</code> at the top of your file to your own group id and library name, all together. For instance, in the example library, the group id is <code>com.myDomain</code> and the library name is <code>myLibrary</code>. The package is then <code>com.myDomain.myLibrary</code>. These values will need to match the values input into your Gradle build file, <code>build.gradle.kts</code>. More on this in Configuring the Gradle build file.</p> <p>Intellij and Visual Studio Code will then direct you to move your code into nested folders, consistent with your package name. For instance, if the package is <code>com.myDomain.myLibrary</code>, the code will be in the folder structure <code>src/main/java/com/myDomain/myLibrary/</code>.</p>"},{"location":"develop.html#resolving-dependencies","title":"Resolving dependencies","text":"<p>In the <code>build.gradle.kts</code> file, there are a few places you should edit, to input your own values. The part of the file that you are invited to edit is indicated by the comment  <code>USER BUILD CONFIGURATIONS</code>. We cover here how to add dependencies for your library. The relevant sections of the <code>build.gradle.kts</code> file are the <code>repositories</code> and <code>dependencies</code> sections.</p> <p>The locations where dependencies will be resolved from are the <code>repositories</code>. Most dependencies can be resolved from Maven. You can add additional repositories here if your dependencies are hosted elsewhere. </p> <p>Your dependencies should be listed within <code>dependencies</code>. For example, the example library uses the <code>commons-math3</code> package from <code>org.apache.commons</code> as a dependency, which is resolved from your listed repositories. It is listed within <code>dependencies</code> with the following structure:</p> <pre><code>implementation(group = \"org.apache.commons\", name = \"commons-math3\", version = \"3.6.1\")\n</code></pre> <p>This dependency, <code>commons-math3</code>, is only needed by the example library.  You can delete this dependency for your own library.  Add your own dependencies using the same structure.</p> <p>NOTE: Dependencies added with <code>implementation</code> will be included in the release. Dependencies added with <code>compileOnly</code>, such as Processing core, are available for compilation, but won't be included in the release.</p> <p>After you add these dependencies, refresh Gradle, and then you will be able to access them in your code. Refresh Gradle by going to the Gradle menu (elephant) in your IDE and click on the refresh icon, which is two arrows pointing at each other's ends in a circle.</p>"},{"location":"develop.html#configuring-the-gradle-build-file","title":"Configuring the Gradle build file","text":"<p>In the <code>build.gradle.kts</code> file, there are a few places you should edit, to input your own values. The section that you are invited to edit is indicated by the comment <code>USER BUILD CONFIGURATIONS</code>. We cover here how to configure the editable sections of the <code>build.gradle.kts</code> file, aside from those sections for resolving dependencies.</p> <ol> <li>Edit the variable <code>libName</code> to contain the name of your library. The name can only contain     lower case alphanumeric characters, and \"-\".      This value is used by Gradle to name the built jar file, and the zip file holding     your release artifacts. If this name does not match the name of the library in your code,      as discussed in the section Developing the library,     Processing will not find your library.</li> <li>Edit the variable <code>group</code> with your own domain or organization name. The group id      of your library uniquely identifies your project. It's often written in reverse domain name      notation. For example, if your website is \"myDomain.com\", your group ID would be      \"com.myDomain\". This group id should match the group id discussed in      section Developing the library.</li> <li> <p>Define the <code>version</code> of your library in <code>build.gradle.kts</code>. This value will also be     included in the release artifact <code>library.properties</code>. The version of your library usually      follows semantic versioning (semver), which uses three numbers separated by dots:      \"MAJOR.MINOR.PATCH\" (e.g., \"1.0.0\"). </p> <ul> <li>MAJOR: Increases when you make incompatible changes.</li> <li>MINOR: Increases when you add new features that are backward-compatible.</li> <li>PATCH: Increases when you make backward-compatible bug fixes.</li> </ul> <p>You will update these numbers as you release new versions of your library.</p> </li> <li> <p>The <code>sketchbookLocation</code> is determined programmatically by your operation system, and is     where your Processing <code>sketchbook</code> folder is. This folder contains your installed libraries.     It is needed if you:</p> <ol> <li>wish to copy the library to the Processing sketchbook, which installs the library locally</li> <li>have Processing library dependencies</li> </ol> <p>This variable is in the editable section, in case the location determined is incorrect. A  symptom of an incorrect <code>sketchbookLocation</code> is that your library does not show up in the Contribution Manager in Processing, after being installed. Please look at our  troubleshooting guide if you suspect this is the case.</p> </li> </ol>"},{"location":"develop.html#creating-examples","title":"Creating examples","text":"<p>Examples help users understand your library\u2019s functionality, it is recommended that you include several clear and well-commented samples sketches in the <code>examples</code> folder.</p> <p>Note: The example sketch included in this template outputs the image shown on the home page.</p>"},{"location":"develop.html#creating-the-release-artifacts","title":"Creating the release artifacts","text":"<p>If you've already gone through the Getting started guide, you will have already run Gradle tasks, and edited the <code>release.properties</code> file.</p> <ol> <li>Fill in the file <code>release.properties</code> with information for your library. This information will be     used by Gradle to create the <code>library.properties</code> file, which is one of the required release      artifacts, used by the website and Contribution Manager to describe your library. In the file itself,     There are comments to guide you. To create just the <code>library.properties</code> file without building the     library, toggle <code>Tasks</code> &gt; <code>processing</code> and double click <code>writeLibraryProperties</code>. This task will     copy all the values in <code>release.properties</code>, and also include the <code>version</code> in your <code>build.gradle.kts</code>     file as <code>prettyVersion</code>.</li> <li>To build the library and create the release artifacts, run the Gradle task <code>releaseProcessingLib</code>.     This task will create a <code>release</code> folder with needed artifacts. To do this, go to the Gradle menu      (elephant), toggle <code>Tasks</code> &gt; <code>processing</code> and double click <code>releaseProcessingLib</code>. This task      has bundled the following required tasks:<ol> <li><code>build</code> task: this bundles a number of build tasks, including the <code>jar</code> task which creates a     jar file. all build artifacts are in the folder <code>build</code>.</li> <li>documentation build.</li> <li>creation of the <code>library.properties</code> file: this file is built from the properties set in the    <code>release.properties</code> file, plus the version, in the task <code>writeLibraryProperties</code>.</li> <li>within the <code>releaseProcessingLib</code> task, the <code>release</code> folder is created, jars of the library and     dependencies are copied, and the <code>library.properties</code> file is copied. Also, a zip file is made.</li> </ol> </li> <li>When you would like to test your library in Processing, toggle <code>Tasks</code> &gt; <code>processing</code> and double click     <code>deployToProcessingSketchbook</code>, which will create the release artifacts, and copy them into the      sketchbook folder.</li> </ol>"},{"location":"develop.html#additional-documentation","title":"Additional Documentation","text":"<p>See the following guides for more details:</p> <ul> <li>Library Overview: an introduction to Processing libraries in general.</li> <li>Library Basics: a basic guide for creating a Processing library from scratch, including structuring the library, registering methods with PApplet, handling events, and preparing the library for distribution.</li> <li>Library Guidelines: describes the requirements for a Processing library, including naming conventions, examples, and other best practices.</li> </ul>"},{"location":"getting-started.html","title":"Getting Started","text":"<p>We're excited that you're interested in contributing to the Processing ecosystem! Building a library lets you expand Processing\u2019s capabilities and it's a great way to give back by sharing your custom tools with the community.</p> <p>This guide will help you set up your development environment and start building your library using the provided template.</p>"},{"location":"getting-started.html#setting-up-the-environment","title":"Setting up the environment","text":"<p>Follow these steps to create your own repository on GitHub and install the necessary tools.</p> <ol> <li>Create a new Github repository using the processing-library-template    as a base.    (See: How to create a repository from a template.)    Choose a name that reflects the library you're building. Make sure to read about Processing's naming rules for libraries. You can always rename the repository later.</li> <li>Clone your repository to your local computer.    (How to clone a repository)</li> <li>Install Processing, if it's not already installed on your computer.</li> <li>Install an integrated development editor (IDE) such as Intellij,     or Visual Studio Code.    Intellij comes fully featured, and has a free community version. For Visual Studio Code, you'll need to install additional extensions, such as Gradle for Java and Java language support.</li> </ol>"},{"location":"getting-started.html#testing-the-library-template","title":"Testing the Library Template","text":"<p>Now that your environment is set up, follow these steps to get familiar with the template and make sure everything works correctly:</p> <ol> <li>Open up your new repository in your chosen IDE.</li> <li>Run the Gradle task <code>deployToProcessingSketchbook</code>: </li> <li>In the Gradle menu (the elephant icon) in your IDE, navigate to <code>Tasks</code> &gt; <code>processing</code> &gt;     <code>deployToProcessingSketchbook</code>, and double click on <code>deployToProcessingSketchbook</code>. </li> <li>This will build the library, create the release artifacts, and copy them to the folder     where Processing libraries are stored.</li> <li>Check if the library appears in the Contribution Manager: </li> <li>Open Processing, and click on <code>Sketch</code> &gt; <code>Import Library ...</code> &gt; <code>Manage Libraries ...</code>.     This opens the Contribution Manager. </li> <li>You should see an entry named \"A Template Example Library\" with a check mark next to it.     This is the sample library you just installed using the template. </li> <li>If it does not appear, please check the troubleshooting guide.</li> <li>Customize the library information:</li> <li>Open the file <code>release.properties</code> and edit the <code>name</code>, <code>authors</code>, and <code>sentence</code> fields to match your library. </li> <li>Rerun the <code>deployToProcessingSketchbook</code> Gradle task to update the library information.</li> <li>Open the Contribution Manager again to see your changes. The name, description, and author(s) should be updated.</li> </ol>"},{"location":"getting-started.html#next-steps","title":"Next Steps","text":"<p>Great, now that you're familiar with the library template, you can explore additional guides:</p> <ol> <li>The development process</li> <li>Releasing your library</li> <li>Troubleshooting</li> </ol>"},{"location":"release.html","title":"Releasing your library","text":"<p>You've written your library, created examples, and tested it in Processing. Now you are ready to release  and publish it.</p>"},{"location":"release.html#creating-your-documentation-website","title":"Creating your Documentation Website","text":"<p>To have your library listed on the Processing website and Contribution Manager, you need to create a  documentation website and host it at a stable URL. This library template includes a built-in way to create and publish a website for your library using Material for Mkdocs and Github Pages.</p>"},{"location":"release.html#configuring-your-documentation-website","title":"Configuring Your Documentation Website","text":"<p>Customize your website by updating the <code>mkdocs.yml</code> file. We have included some plugins, such as search, code block copy and annotations, and navigation bars. The navigation menu is configured in <code>mkdocs.yml</code> as well.</p> <p>To write your documentation, edit the Markdown files located in the <code>docs</code> folder. You can add new pages by creating additional Markdown files in the same folder, then add them to the menu in the <code>nav</code> section of the <code>mkdocs.yml</code> file.</p> <p>For examples of how Processing libraries use Material for MkDocs, see EasyEase or FIP</p>"},{"location":"release.html#deploying-your-documentation-on-github-pages","title":"Deploying your Documentation on Github Pages","text":"<p>This template include a workflow that automatically deploys your documentaion website to GitHub Pages. Here is how you can set this up for your repository:</p> <ol> <li>Enable GitHub Pages and GitHub Actions in your repository settings: Under Settings &gt; GitHub Pages, set the source to \"Deploy from a branch\", choose the <code>gh-pages</code> branch, select the <code>/(root)</code> folder, and then click Save.</li> <li>Wait for the workflow to complete (this can take a few minutes). Once finished, your site\u2019s URL will be displayed with the message \"Your site is live at {{URL}}.\"</li> <li>Add your website URL to the <code>url</code> property in the <code>release.properties</code> file.</li> </ol> <p>Any time you want to update the documentation, edit your <code>.md</code> files and <code>mkdocs.yml</code> as needed, then push your changes to <code>main</code>. This will trigger the workflow to deploy an update.</p> <p>Note: You can find the workflow file at <code>.github/workflows/deploy_website.yml</code>.</p>"},{"location":"release.html#alternative-hosting-and-static-site-generators","title":"Alternative Hosting and Static Site Generators","text":"<p>If you prefer not to use the built-in workflow with GitHub Pages and Material for MkDocs, you are free to use another static site generator or hosting service. Note that it\u2019s important that the site remains online, as it serves as a reference for users of your library. </p>"},{"location":"release.html#releasing-on-github","title":"Releasing on Github","text":"<p>Releasing your library on GitHub allows users to access known-working versions of your library. Unlike the repository itself, which may contain ongoing development or experimental features, releases provide specific versions of your library that are ready for use. Here is how you can make a new release using this template:</p> <ol> <li>In your repository, click on Releases.</li> <li>Click Draft a new release to start.</li> <li>Click on Choose a tag a tag starting with \"v\" (e.g., <code>v1.0.0</code>). Make sure it matches the version set in your <code>release.properties</code> file.</li> <li>Select the branch you want to use for this release (e.g., <code>main</code>).</li> <li>Add a title and description for the release, highlighting key updates or changes.</li> <li>Click on Publish release. </li> </ol> <p>This will trigger the GitHub workflow (<code>.github/workflows/release.yml</code>), which automatically create release artifacts\u2014<code>*.txt</code>, <code>*.zip</code>, <code>*.pdex</code> files\u2014and add them to the release.</p> <p>Note: By default, GitHub will also include compressed versions of your source code (e.g., <code>Source code (zip)</code> and <code>Source code (tar.gz)</code>).</p> <p>For more details on releases, see GitHub\u2019s official guide on releasing projects.</p>"},{"location":"release.html#publish-your-library-to-the-contribution-manager","title":"Publish your Library to the Contribution Manager","text":"<p>Once you are ready to add your contribution to the Contribution Manager, email contributions@processing.org with the url to your releases page. It should look something like <code>https://github.com/{{username}}/{{repository}}/releases/</code>. A Processing maintainer will review and publish your contribution. You may be asked for more information about your contribution or some modifications if needed.</p>"},{"location":"troubleshooting.html","title":"Troubleshooting","text":""},{"location":"troubleshooting.html#library-does-not-appear-in-the-contribution-manager","title":"Library does not appear in the Contribution Manager","text":"<ol> <li>Please check that the value you have for your library name in the code is the same as the <code>libName</code> in    the <code>build.gradle.kts</code> file. </li> <li>One possible issue is the location of your <code>sketchbook</code> folder. Processing stores installed libraries in     the <code>sketchbook</code> folder. Where your <code>sketchbook</code> folder is located depends on your operating system. You     can see where Gradle thinks your sketchbook folder is in the task run output. Check that the folder exists,     and contains the subfolder <code>libraries</code>. If not, you can check the sketchbook location in your Processing     application preferences.  Click on <code>File</code> &gt; <code>Preferences</code>, and note the sketchbook folder location. If this     location is different from what's in the Gradle build file, you will need to input the value manually. Also,     please submit an issue to this repository.</li> </ol>"},{"location":"troubleshooting.html#dependency-is-not-accessible-in-code","title":"Dependency is not accessible in code","text":"<ol> <li>If a dependency is not accessible in your code, check for errors in the build window in     Intellij (hammer icon), or run <code>Tasks</code> &gt; <code>build</code> &gt; <code>build</code>, and look for an error message.</li> </ol>"}]}